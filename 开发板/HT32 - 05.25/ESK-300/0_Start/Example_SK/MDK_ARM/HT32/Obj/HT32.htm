<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32\Obj\HT32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32\Obj\HT32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed May 25 22:36:00 2016
<BR><P>
<H3>Maximum Stack Usage =        448 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Task_DealData &rArr; Wifi_Connect &rArr; Wifi_Login &rArr; Wifi_TCP_Server &rArr; Create_TCP_Server &rArr; AppCreatSocketProc &rArr; RISocketCreate &rArr; StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c2]">OS_CPU_SR_Save</a>
 <LI><a href="#[c5]">OS_CPU_SR_Restore</a>
 <LI><a href="#[cf]">OSStartHighRdy</a>
 <LI><a href="#[da]">OSCtxSw</a>
 <LI><a href="#[c4]">OSIntCtxSw</a>
 <LI><a href="#[8]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[23]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4d]">OS_TaskReturn</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">OS_TaskReturn</a><BR>
 <LI><a href="#[118]">_USBD_CopyMemory</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[118]">_USBD_CopyMemory</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2e]">BFTM0_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2f]">BFTM1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[c]">BOD_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from ht32f165x_it.o(i.BusFault_Handler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[a]">CKRDY_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[22]">COMP_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from ht32f165x_it.o(i.DebugMon_Handler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[43]">EBI_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[10]">EVWUP_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from ht32f165x_it.o(i.EXTI0_IRQHandler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1c]">EXTI10_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1d]">EXTI11_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1e]">EXTI12_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1f]">EXTI13_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[20]">EXTI14_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[21]">EXTI15_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from ht32f165x_it.o(i.EXTI1_IRQHandler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from ht32f165x_it.o(i.EXTI2_IRQHandler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[17]">EXTI5_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[18]">EXTI6_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[19]">EXTI7_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1a]">EXTI8_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1b]">EXTI9_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2c]">GPTM0_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2d]">GPTM1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f165x_it.o(i.HardFault_Handler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[30]">I2C0_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[39]">I2S_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[11]">LPWUP_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[24]">MCTM0BRK_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[27]">MCTM0CC_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[26]">MCTM0TR_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[25]">MCTM0UP_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[28]">MCTM1BRK_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2b]">MCTM1CC_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2a]">MCTM1TR_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[29]">MCTM1UP_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from ht32f165x_it.o(i.MemManage_Handler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f165x_it.o(i.NMI_Handler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[47]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[8]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(.text) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[4c]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OSInit)
 <LI><a href="#[4d]">OS_TaskReturn</a> from os_cpu_c.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[3b]">PDMA_CH0_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[3c]">PDMA_CH1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[3d]">PDMA_CH2_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[3e]">PDMA_CH3_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[3f]">PDMA_CH4_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[40]">PDMA_CH5_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[41]">PDMA_CH6_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[42]">PDMA_CH7_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[53]">Reset_Handler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[38]">SCI_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[32]">SPI0_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from ht32f165x_it.o(i.SVC_Handler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from ht32f165x_it.o(i.SysTick_Handler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_ht32f165x.o(i.SystemInit) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[50]">Task_DealData</a> from tasks.o(i.Task_DealData) referenced from main.o(i.startup_task)
 <LI><a href="#[52]">Task_DealRock</a> from tasks.o(i.Task_DealRock) referenced from main.o(i.startup_task)
 <LI><a href="#[51]">Task_RecvData</a> from tasks.o(i.Task_RecvData) referenced from main.o(i.startup_task)
 <LI><a href="#[36]">UART0_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[37]">UART1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[34]">USART0_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[3a]">USB_IRQHandler</a> from ht32_serial.o(i.USB_IRQHandler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from ht32f165x_it.o(i.UsageFault_Handler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[45]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[49]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4a]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[48]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4e]">fputc</a> from uart1.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[4b]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4f]">startup_task</a> from main.o(i.startup_task) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[53]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))

<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CKRDY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EBI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LPWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MCTM0BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MCTM0CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>MCTM0TR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>MCTM0UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCTM1BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MCTM1CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MCTM1TR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MCTM1UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PDMA_CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PDMA_CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PDMA_CH2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PDMA_CH3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PDMA_CH4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>PDMA_CH5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PDMA_CH6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>PDMA_CH7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[54]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[15e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[15f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[160]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[161]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[162]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[c2]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c5]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[cf]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[da]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c4]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetSSID
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetKey
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketTCPSend
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SetSsid
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SetPasswd
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_grobalBuff
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SetSsid
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SetPasswd
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIWlanJoin
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketCreate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetWlanType
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetSSID
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetNip
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetKey
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISaveParam
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIResetDevice
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketTCPSend
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketClose
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIGetWlanStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCreatSocketProc
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e2]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetSSID
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetKey
</UL>

<P><STRONG><a name="[72]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCreatSocketProc
</UL>

<P><STRONG><a name="[59]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToIpaddr
</UL>

<P><STRONG><a name="[5b]"></a>_scanf_int</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[6f]"></a>_scanf_string</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_fmul</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temperature
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temperature
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temperature
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temperature
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temperature
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temperature
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[168]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[169]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[5a]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[48]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[16a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[68]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[63]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[62]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[55]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[16b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[16c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>__vfscanf</STRONG> (Thumb, 806 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[6e]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[8f]"></a>AFIO_EXTISourceConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ht32f1655_56_gpio.o(i.AFIO_EXTISourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AFIO_EXTISourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[8b]"></a>AFIO_GPxConfig</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ht32f1655_56_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quilt_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Piss_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Onbed_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCfg_moni
</UL>

<P><STRONG><a name="[70]"></a>AppCreatSocketProc</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, wmri.o(i.AppCreatSocketProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = AppCreatSocketProc &rArr; RISocketCreate &rArr; StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_ConnectSocket
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_TCP_Server
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f165x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>CKCU_Configuration</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.CKCU_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_Configuration &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>CKCU_GetClocksFrequency</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ht32f1655_56_ckcu.o(i.CKCU_GetClocksFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPLLFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[77]"></a>CKCU_GetPLLFrequency</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ht32f1655_56_ckcu.o(i.CKCU_GetPLLFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[78]"></a>CKCU_GetUSARTClockFreq</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ht32f1655_56_ckcu.o(i.CKCU_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[75]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, ht32f1655_56_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_Configuration
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HT32F_DVB_ClockConfig
</UL>

<P><STRONG><a name="[79]"></a>Check_Buff</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system.o(i.Check_Buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Check_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_RecvBuff
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RecvBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_GrobalBuff
</UL>

<P><STRONG><a name="[7c]"></a>Check_Cry</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cry-voice.o(i.Check_Cry))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Check_Cry &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_packet
</UL>

<P><STRONG><a name="[155]"></a>Check_Fan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fan.o(i.Check_Fan))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_packet
</UL>

<P><STRONG><a name="[153]"></a>Check_Milk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, milk.o(i.Check_Milk))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_packet
</UL>

<P><STRONG><a name="[154]"></a>Check_Music</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, risym-mp3.o(i.Check_Music))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_packet
</UL>

<P><STRONG><a name="[7f]"></a>Check_Piss</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, piss.o(i.Check_Piss))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Check_Piss &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_packet
</UL>

<P><STRONG><a name="[80]"></a>Check_Quilt</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, quit.o(i.Check_Quilt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Check_Quilt &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_packet
</UL>

<P><STRONG><a name="[f8]"></a>Check_Rock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rock.o(i.Check_Rock))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_DealRock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_packet
</UL>

<P><STRONG><a name="[81]"></a>Check_Temperature</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gy-mcu90615.o(i.Check_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Check_Temperature &rArr; read_temperature &rArr; check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_legal
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_packet
</UL>

<P><STRONG><a name="[84]"></a>Create_TCP_Server</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, my_spi_wifi_api.o(i.Create_TCP_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Create_TCP_Server &rArr; AppCreatSocketProc &rArr; RISocketCreate &rArr; StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCreatSocketProc
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TCP_Server
</UL>

<P><STRONG><a name="[85]"></a>Deal_Command</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bed_client.o(i.Deal_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Deal_Command &rArr; Modules_Contrl &rArr; Music_Control &rArr; set_volume &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Contrl
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_client
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f165x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f165x_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = EXTI0_IRQHandler &rArr; setReadStatu &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReadStatu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f165x_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = EXTI1_IRQHandler &rArr; setReadStatu &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReadStatu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f165x_it.o(i.EXTI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>EXTI_ClearEdgeFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_exti.o(i.EXTI_ClearEdgeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>EXTI_Config</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, main.o(i.EXTI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EXTI_Config &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IntConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_EXTISourceConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>EXTI_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f1655_56_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[90]"></a>EXTI_IntConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f1655_56_exti.o(i.EXTI_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[92]"></a>Fan_Contorl</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fan.o(i.Fan_Contorl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Fan_Contorl
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Contrl
</UL>

<P><STRONG><a name="[94]"></a>Fan_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fan.o(i.Fan_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Fan_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Init
</UL>

<P><STRONG><a name="[95]"></a>Force_Reset</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi.o(i.Force_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Force_Reset &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_ForceReset
</UL>

<P><STRONG><a name="[8c]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quilt_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Piss_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Onbed_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCfg_moni
</UL>

<P><STRONG><a name="[9c]"></a>GPIO_DriveConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_DriveConfig))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDInit
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_InputConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quilt_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Piss_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Onbed_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCfg_moni
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[7d]"></a>GPIO_ReadInBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Quilt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Piss
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Cry
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadWriteByte
</UL>

<P><STRONG><a name="[93]"></a>GPIO_WriteOutBits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_WriteOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Control
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Milk_Contorl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Contorl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_Init_Set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_volume
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_pause
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_Stop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_One
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCfg_moni
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadWriteByte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINSS
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Force_Reset
</UL>

<P><STRONG><a name="[96]"></a>GetStatus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi.o(i.GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetStatus &rArr; SPIReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadWriteByte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINSS
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
</UL>

<P><STRONG><a name="[11b]"></a>Get_SocketID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, my_spi_wifi_api.o(i.Get_SocketID))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_ConnectSocket
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_CloseSocket
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TCP_Server
</UL>

<P><STRONG><a name="[121]"></a>Get_WlanStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, my_spi_wifi_api.o(i.Get_WlanStatus))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Login
</UL>

<P><STRONG><a name="[99]"></a>HT32F_DVB_LEDInit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ht32_board.o(i.HT32F_DVB_LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HT32F_DVB_LEDInit &rArr; _HT32F_DVB_ClockConfig &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDOff
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HT32F_DVB_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[9b]"></a>HT32F_DVB_LEDOff</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32_board.o(i.HT32F_DVB_LEDOff))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
</UL>

<P><STRONG><a name="[146]"></a>HT32F_DVB_LEDOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32_board.o(i.HT32F_DVB_LEDOn))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f165x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>Login_Wifi</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, my_spi_wifi_api.o(i.Login_Wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Login_Wifi &rArr; RISetNip &rArr; StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIWlanJoin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetWlanType
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetSSID
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetNip
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetKey
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISaveParam
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIResetDevice
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIGetWlanStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Login
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f165x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>Milk_Contorl</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, milk.o(i.Milk_Contorl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Milk_Contorl
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Contrl
</UL>

<P><STRONG><a name="[86]"></a>Modules_Contrl</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bed_client.o(i.Modules_Contrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Modules_Contrl &rArr; Music_Control &rArr; set_volume &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_Control
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Control
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Milk_Contorl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Contorl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_Contrl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Command
</UL>

<P><STRONG><a name="[aa]"></a>Modules_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.Modules_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Modules_Init &rArr; Wifi_Init &rArr; spiInit &rArr; spiCfg_moni &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quilt_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Piss_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Onbed_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>Mp3_Init_Set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, risym-mp3.o(i.Mp3_Init_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mp3_Init_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Init
</UL>

<P><STRONG><a name="[a9]"></a>Music_Control</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, risym-mp3.o(i.Music_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Music_Control &rArr; set_volume &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_volume
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_pause
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Contrl
</UL>

<P><STRONG><a name="[ae]"></a>Music_Init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, risym-mp3.o(i.Music_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Music_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_Init_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f165x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>NVIC_Configuration</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.NVIC_Configuration))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[bb]"></a>OSInit</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c0]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[f3]"></a>OSIntEnter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c1]"></a>OSIntExit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c6]"></a>OSSemCreate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sem_init
</UL>

<P><STRONG><a name="[c8]"></a>OSSemPend</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_sem
</UL>

<P><STRONG><a name="[cc]"></a>OSSemPost</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_WlanSem
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_RecvBuff
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_led
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadStatu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReadStatu
</UL>

<P><STRONG><a name="[ce]"></a>OSStart</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[d0]"></a>OSTaskCreate</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_task
</UL>

<P><STRONG><a name="[be]"></a>OSTaskCreateExt</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[dc]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[d3]"></a>OSTaskDel</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_task
</UL>

<P><STRONG><a name="[d5]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[dd]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[bf]"></a>OSTaskNameSet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d1]"></a>OSTaskStkInit</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[47]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>OSTimeDly</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_sem
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_led
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RecvData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Control
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_volume
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_pause
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temperature
</UL>

<P><STRONG><a name="[d8]"></a>OSTimeTick</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d9]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[d4]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(i.OS_Dummy))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[cd]"></a>OS_EventTaskRdy</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[cb]"></a>OS_EventTaskRemove</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[c9]"></a>OS_EventTaskWait</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[c7]"></a>OS_EventWaitListInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[bd]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[ca]"></a>OS_Sched</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[d7]"></a>OS_StrCopy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_StrCopy))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>

<P><STRONG><a name="[d6]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(i.OS_StrLen))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>

<P><STRONG><a name="[d2]"></a>OS_TCBInit</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[4c]"></a>OS_TaskIdle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OSInit)
</UL>
<P><STRONG><a name="[4d]"></a>OS_TaskReturn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OS_TaskReturn))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[b2]"></a>Onbed_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, onbed.o(i.Onbed_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Onbed_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Init
</UL>

<P><STRONG><a name="[af]"></a>Piss_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, piss.o(i.Piss_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Piss_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Init
</UL>

<P><STRONG><a name="[b0]"></a>Quilt_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, quit.o(i.Quilt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Quilt_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Init
</UL>

<P><STRONG><a name="[e0]"></a>RICreateDataHeader</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wmri.o(i.RICreateDataHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RICreateDataHeader &rArr; RICheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketTCPSend
</UL>

<P><STRONG><a name="[9e]"></a>RIGetWlanStatus</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, wmri.o(i.RIGetWlanStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = RIGetWlanStatus &rArr; SPITxCmd &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateCmdHeader
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Wifi
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Login
</UL>

<P><STRONG><a name="[a4]"></a>RIResetDevice</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, wmri.o(i.RIResetDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = RIResetDevice &rArr; SPITxCmd &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateCmdHeader
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Wifi
</UL>

<P><STRONG><a name="[a3]"></a>RISaveParam</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, wmri.o(i.RISaveParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = RISaveParam &rArr; SPITxCmd &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateCmdHeader
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Wifi
</UL>

<P><STRONG><a name="[a1]"></a>RISetKey</STRONG> (Thumb, 92 bytes, Stack size 120 bytes, wmri.o(i.RISetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = RISetKey &rArr; SPITxCmd &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateCmdHeader
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Wifi
</UL>

<P><STRONG><a name="[a2]"></a>RISetNip</STRONG> (Thumb, 100 bytes, Stack size 128 bytes, wmri.o(i.RISetNip))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = RISetNip &rArr; StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToIpaddr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateCmdHeader
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Wifi
</UL>

<P><STRONG><a name="[a0]"></a>RISetSSID</STRONG> (Thumb, 70 bytes, Stack size 80 bytes, wmri.o(i.RISetSSID))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = RISetSSID &rArr; SPITxCmd &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateCmdHeader
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Wifi
</UL>

<P><STRONG><a name="[9f]"></a>RISetWlanType</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, wmri.o(i.RISetWlanType))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = RISetWlanType &rArr; SPITxCmd &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateCmdHeader
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Wifi
</UL>

<P><STRONG><a name="[e5]"></a>RISocketClose</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, wmri.o(i.RISocketClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = RISocketClose &rArr; SPITxCmd &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateCmdHeader
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_CloseSocket
</UL>

<P><STRONG><a name="[73]"></a>RISocketCreate</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, wmri.o(i.RISocketCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = RISocketCreate &rArr; StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToIpaddr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateCmdHeader
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCreatSocketProc
</UL>

<P><STRONG><a name="[e6]"></a>RISocketTCPSend</STRONG> (Thumb, 58 bytes, Stack size 184 bytes, wmri.o(i.RISocketTCPSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = RISocketTCPSend &rArr; SPITxData &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateDataHeader
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxData
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Send
</UL>

<P><STRONG><a name="[a5]"></a>RIWlanJoin</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, wmri.o(i.RIWlanJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = RIWlanJoin &rArr; SPITxCmd &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateCmdHeader
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Wifi
</UL>

<P><STRONG><a name="[10d]"></a>RSTCU_PeripReset</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, ht32f1655_56_rstcu.o(i.RSTCU_PeripReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
</UL>

<P><STRONG><a name="[e8]"></a>Read_FromBuff</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, system.o(i.Read_FromBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Read_FromBuff &rArr; cpyfrombuf &rArr; refresh_BuffState &rArr; Set_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_RecvBuff
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RecvBuff
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpyfrombuf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_GrobalBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[a8]"></a>Rock_Control</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rock.o(i.Rock_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rock_Control &rArr; Rock_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Rock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Contrl
</UL>

<P><STRONG><a name="[b1]"></a>Rock_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rock.o(i.Rock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Rock_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Rock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Init
</UL>

<P><STRONG><a name="[ed]"></a>Rock_One</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rock.o(i.Rock_One))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Rock_One &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rocking
</UL>

<P><STRONG><a name="[ec]"></a>Rock_Stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rock.o(i.Rock_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rock_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_Control
</UL>

<P><STRONG><a name="[ee]"></a>Rocking</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rock.o(i.Rocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Rocking &rArr; Rock_One &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_One
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_DealRock
</UL>

<P><STRONG><a name="[97]"></a>SPINSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi.o(i.SPINSS))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxData
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WifiStatu
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RecDataLen
</UL>

<P><STRONG><a name="[98]"></a>SPIReadWriteByte</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, spi.o(i.SPIReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxData
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WifiStatu
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RecDataLen
</UL>

<P><STRONG><a name="[e1]"></a>SPITxCmd</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, spi.o(i.SPITxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = SPITxCmd &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadWriteByte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINSS
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIWlanJoin
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketCreate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetWlanType
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetSSID
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetNip
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetKey
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISaveParam
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIResetDevice
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketClose
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIGetWlanStatus
</UL>

<P><STRONG><a name="[e7]"></a>SPITxData</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, spi.o(i.SPITxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SPITxData &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadWriteByte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINSS
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketTCPSend
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f165x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>SYSTICK_ClockSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.SYSTICK_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_task
</UL>

<P><STRONG><a name="[15a]"></a>SYSTICK_CounterCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.SYSTICK_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_task
</UL>

<P><STRONG><a name="[159]"></a>SYSTICK_IntConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.SYSTICK_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_task
</UL>

<P><STRONG><a name="[158]"></a>SYSTICK_SetReloadValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.SYSTICK_SetReloadValue))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_task
</UL>

<P><STRONG><a name="[f0]"></a>Save_ToBuffer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, system.o(i.Save_ToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Save_ToBuffer &rArr; cpytobuf &rArr; refresh_BuffState &rArr; Set_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_RecvBuff
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RecvBuff
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpytobuf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_GrobalBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_Data
</UL>

<P><STRONG><a name="[f2]"></a>Set_Buff</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, system.o(i.Set_Buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Set_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_RecvBuff
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RecvBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_BuffState
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f165x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_ht32f165x.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Task_DealData</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.Task_DealData))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Task_DealData &rArr; Wifi_Connect &rArr; Wifi_Login &rArr; Wifi_TCP_Server &rArr; Create_TCP_Server &rArr; AppCreatSocketProc &rArr; RISocketCreate &rArr; StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_led
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_client
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_ForceReset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Connect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.startup_task)
</UL>
<P><STRONG><a name="[52]"></a>Task_DealRock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.Task_DealRock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Task_DealRock &rArr; Rocking &rArr; Rock_One &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rocking
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Rock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.startup_task)
</UL>
<P><STRONG><a name="[51]"></a>Task_RecvData</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tasks.o(i.Task_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Task_RecvData &rArr; Wifi_Recv &rArr; read_Data &rArr; deal_Data &rArr; Save_ToBuffer &rArr; cpytobuf &rArr; refresh_BuffState &rArr; Set_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_led
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadStatu
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Recv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReadStatu
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.startup_task)
</UL>
<P><STRONG><a name="[ac]"></a>Temperature_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gy-mcu90615.o(i.Temperature_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Temperature_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Init
</UL>

<P><STRONG><a name="[14a]"></a>USART_GetLineStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_GetLineStatus))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>

<P><STRONG><a name="[fb]"></a>USART_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ht32f1655_56_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_Init &rArr; CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetUSARTClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[14b]"></a>USART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>

<P><STRONG><a name="[15c]"></a>USART_RxCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_RxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[13d]"></a>USART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[15b]"></a>USART_TxCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_TxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[fc]"></a>USBDCore_IRQHandler</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, ht32_usbd_core.o(i.USBDCore_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBDCore_IRQHandler &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadSETUPData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOff
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetINT
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEPTnINTNumber
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableINT
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSendSTALL
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetINT
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearINT
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClearINT
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>USBD_ClearINT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_ClearINT))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>USBD_DeInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>USBD_EPTClearDTG</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTClearDTG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearDTG
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[110]"></a>USBD_EPTClearHalt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTClearHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[108]"></a>USBD_EPTClearINT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTClearINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearINT
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>USBD_EPTGetBuffer0Addr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetBuffer0Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetBuffer0Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[112]"></a>USBD_EPTGetBuffer1Addr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetBuffer1Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[113]"></a>USBD_EPTGetBufferLen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetBufferLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
</UL>

<P><STRONG><a name="[114]"></a>USBD_EPTGetHalt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetStatus
</UL>

<P><STRONG><a name="[104]"></a>USBD_EPTGetINT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetINT
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>USBD_EPTGetTransferCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetTransferCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetTransferCount
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[102]"></a>USBD_EPTInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ht32f1655_56_usbd.o(i.USBD_EPTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EPTInit &rArr; USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[117]"></a>USBD_EPTReadMemory</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ht32f1655_56_usbd.o(i.USBD_EPTReadMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
</UL>

<P><STRONG><a name="[10b]"></a>USBD_EPTReadOUTData</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ht32f1655_56_usbd.o(i.USBD_EPTReadOUTData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>USBD_EPTReset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
</UL>

<P><STRONG><a name="[107]"></a>USBD_EPTSendSTALL</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTSendSTALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTSendSTALL
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>USBD_EPTSetHalt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTSetHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTSetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[10a]"></a>USBD_EPTWriteINData</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ht32f1655_56_usbd.o(i.USBD_EPTWriteINData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_EPTWriteINData &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
</UL>

<P><STRONG><a name="[103]"></a>USBD_EnableINT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_EnableINT))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>USBD_GetEPTnINTNumber</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_GetEPTnINTNumber))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>USBD_GetINT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_GetINT))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>USBD_PowerOff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_PowerOff))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>USBD_PowerOn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>USBD_ReadSETUPData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_ReadSETUPData))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>USBD_SetAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[3a]"></a>USB_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32_serial.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_IRQHandler &rArr; USBDCore_IRQHandler &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f165x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>Voice_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cry-voice.o(i.Voice_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Voice_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Init
</UL>

<P><STRONG><a name="[e9]"></a>Wait_GrobalBuff</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, system.o(i.Wait_GrobalBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Wait_GrobalBuff &rArr; Check_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buff
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_ToBuffer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FromBuff
</UL>

<P><STRONG><a name="[11a]"></a>Wifi_CloseSocket</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi-wifi.o(i.Wifi_CloseSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Wifi_CloseSocket &rArr; RISocketClose &rArr; SPITxCmd &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketClose
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SocketID
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_client
</UL>

<P><STRONG><a name="[f5]"></a>Wifi_Connect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi-wifi.o(i.Wifi_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Wifi_Connect &rArr; Wifi_Login &rArr; Wifi_TCP_Server &rArr; Create_TCP_Server &rArr; AppCreatSocketProc &rArr; RISocketCreate &rArr; StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Login
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_DealData
</UL>

<P><STRONG><a name="[11d]"></a>Wifi_ConnectSocket</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spi-wifi.o(i.Wifi_ConnectSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Wifi_ConnectSocket &rArr; AppCreatSocketProc &rArr; RISocketCreate &rArr; StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SocketID
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCreatSocketProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_create
</UL>

<P><STRONG><a name="[f4]"></a>Wifi_ForceReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi-wifi.o(i.Wifi_ForceReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Wifi_ForceReset &rArr; Force_Reset &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Force_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_DealData
</UL>

<P><STRONG><a name="[ab]"></a>Wifi_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi-wifi.o(i.Wifi_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Wifi_Init &rArr; spiInit &rArr; spiCfg_moni &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SetSsid
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SetPasswd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Init
</UL>

<P><STRONG><a name="[11c]"></a>Wifi_Login</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi-wifi.o(i.Wifi_Login))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Wifi_Login &rArr; Wifi_TCP_Server &rArr; Create_TCP_Server &rArr; AppCreatSocketProc &rArr; RISocketCreate &rArr; StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIGetWlanStatus
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Wifi
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_WlanStatus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TCP_Server
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Connect
</UL>

<P><STRONG><a name="[fa]"></a>Wifi_Recv</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spi-wifi.o(i.Wifi_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Wifi_Recv &rArr; read_Data &rArr; deal_Data &rArr; Save_ToBuffer &rArr; cpytobuf &rArr; refresh_BuffState &rArr; Set_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_WlanSem
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WlanSem
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WifiStatu
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RecDataLen
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RecvData
</UL>

<P><STRONG><a name="[128]"></a>Wifi_Send</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi-wifi.o(i.Wifi_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Wifi_Send &rArr; RISocketTCPSend &rArr; SPITxData &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_WlanSem
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WlanSem
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketTCPSend
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[120]"></a>Wifi_SetPasswd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spi-wifi.o(i.Wifi_SetPasswd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Wifi_SetPasswd
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Init
</UL>

<P><STRONG><a name="[11f]"></a>Wifi_SetSsid</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spi-wifi.o(i.Wifi_SetSsid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Wifi_SetSsid
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Init
</UL>

<P><STRONG><a name="[122]"></a>Wifi_TCP_Server</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, spi-wifi.o(i.Wifi_TCP_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Wifi_TCP_Server &rArr; Create_TCP_Server &rArr; AppCreatSocketProc &rArr; RISocketCreate &rArr; StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SocketID
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_TCP_Server
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Login
</UL>

<P><STRONG><a name="[12c]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16d]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[a7]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_client
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RecvData
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_DealRock
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_DealData
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_ConnectSocket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Control
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_packet
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_device_mac_type
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mac
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Contrl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_Cmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateCmdHeader
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TCP_Server
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Login
</UL>

<P><STRONG><a name="[16e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[16f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[170]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[130]"></a>auto_Contrl</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bed_client.o(i.auto_Contrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = auto_Contrl &rArr; Modules_Contrl &rArr; Music_Control &rArr; set_volume &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Contrl
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_packet
</UL>

<P><STRONG><a name="[f7]"></a>bed_client</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, bed_client.o(i.bed_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = bed_client &rArr; socket_create &rArr; Wifi_ConnectSocket &rArr; AppCreatSocketProc &rArr; RISocketCreate &rArr; StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_grobalBuff
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_CloseSocket
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_create
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_device_mac_type
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_command_to_server
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bed_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_packet
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_command_from_server
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Command
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_DealData
</UL>

<P><STRONG><a name="[138]"></a>check</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, gy-mcu90615.o(i.check))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temperature
</UL>

<P><STRONG><a name="[139]"></a>check_mac</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bed_client.o(i.check_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_mac &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_device_mac_type
</UL>

<P><STRONG><a name="[137]"></a>clear_grobalBuff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system.o(i.clear_grobalBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_grobalBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_client
</UL>

<P><STRONG><a name="[b4]"></a>client_Init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, bed_client.o(i.client_Init))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Init
</UL>

<P><STRONG><a name="[ea]"></a>cpyfrombuf</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, system.o(i.cpyfrombuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = cpyfrombuf &rArr; refresh_BuffState &rArr; Set_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_BuffState
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FromBuff
</UL>

<P><STRONG><a name="[f1]"></a>cpytobuf</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, system.o(i.cpytobuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = cpytobuf &rArr; refresh_BuffState &rArr; Set_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_BuffState
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_ToBuffer
</UL>

<P><STRONG><a name="[13b]"></a>deal_Cmd</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, my_spi_wifi_api.o(i.deal_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = deal_Cmd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Data
</UL>

<P><STRONG><a name="[13c]"></a>deal_Data</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, my_spi_wifi_api.o(i.deal_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = deal_Data &rArr; Save_ToBuffer &rArr; cpytobuf &rArr; refresh_BuffState &rArr; Set_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_ToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Data
</UL>

<P><STRONG><a name="[7e]"></a>delay_ms</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_client
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_GrobalBuff
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_ConnectSocket
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Quilt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Piss
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Cry
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_device_mac_type
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temperature
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_One
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxData
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPITxCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Wifi
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Force_Reset
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TCP_Server
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Login
</UL>

<P><STRONG><a name="[ef]"></a>delay_us</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadWriteByte
</UL>

<P><STRONG><a name="[142]"></a>diff_temp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gy-mcu90615.o(i.diff_temp))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_onbed
</UL>

<P><STRONG><a name="[4e]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart1.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[f9]"></a>getReadStatu</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sem.o(i.getReadStatu))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = getReadStatu &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RecvData
</UL>

<P><STRONG><a name="[125]"></a>get_RecDataLen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, my_spi_wifi_api.o(i.get_RecDataLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_RecDataLen &rArr; SPIReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadWriteByte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINSS
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Recv
</UL>

<P><STRONG><a name="[7a]"></a>get_RecvBuff</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sem.o(i.get_RecvBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Buff
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_ToBuffer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FromBuff
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buff
</UL>

<P><STRONG><a name="[124]"></a>get_WifiStatu</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, my_spi_wifi_api.o(i.get_WifiStatu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_WifiStatu &rArr; SPIReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadWriteByte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINSS
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Recv
</UL>

<P><STRONG><a name="[123]"></a>get_WlanSem</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sem.o(i.get_WlanSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = get_WlanSem &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Recv
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Send
</UL>

<P><STRONG><a name="[135]"></a>get_command_from_server</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bed_client.o(i.get_command_from_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = get_command_from_server &rArr; read &rArr; Read_FromBuff &rArr; cpyfrombuf &rArr; refresh_BuffState &rArr; Set_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_client
</UL>

<P><STRONG><a name="[131]"></a>get_data_packet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bed_client.o(i.get_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = get_data_packet &rArr; set_data_packet &rArr; Check_Temperature &rArr; read_temperature &rArr; check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_client
</UL>

<P><STRONG><a name="[152]"></a>get_mac</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, bed_client.o(i.get_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_device_mac_type
</UL>

<P><STRONG><a name="[83]"></a>is_legal</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gy-mcu90615.o(i.is_legal))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Temperature
</UL>

<P><STRONG><a name="[141]"></a>is_onbed</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gy-mcu90615.o(i.is_onbed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = is_onbed
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diff_temp
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_packet
</UL>

<P><STRONG><a name="[143]"></a>led_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = led_init &rArr; HT32F_DVB_LEDInit &rArr; _HT32F_DVB_ClockConfig &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>led_off</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led.o(i.led_off))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_led
</UL>

<P><STRONG><a name="[145]"></a>led_on</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led.o(i.led_on))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDOn
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_led
</UL>

<P><STRONG><a name="[13e]"></a>lock_sem</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sem.o(i.lock_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WlanSem
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RecvBuff
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_led
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadStatu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReadStatu
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sem_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_Configuration
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7b]"></a>put_RecvBuff</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sem.o(i.put_RecvBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = put_RecvBuff &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Buff
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_ToBuffer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FromBuff
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buff
</UL>

<P><STRONG><a name="[127]"></a>put_WlanSem</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sem.o(i.put_WlanSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = put_WlanSem &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Recv
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Send
</UL>

<P><STRONG><a name="[13f]"></a>read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = read &rArr; Read_FromBuff &rArr; cpyfrombuf &rArr; refresh_BuffState &rArr; Set_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FromBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_respone
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_device_mac_type
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_command_from_server
</UL>

<P><STRONG><a name="[126]"></a>read_Data</STRONG> (Thumb, 90 bytes, Stack size 128 bytes, my_spi_wifi_api.o(i.read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = read_Data &rArr; deal_Data &rArr; Save_ToBuffer &rArr; cpytobuf &rArr; refresh_BuffState &rArr; Set_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_Data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadWriteByte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINSS
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Recv
</UL>

<P><STRONG><a name="[149]"></a>read_data</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, uart1.o(i.read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = read_data &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetLineStatus
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temperature
</UL>

<P><STRONG><a name="[13a]"></a>refresh_BuffState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system.o(i.refresh_BuffState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = refresh_BuffState &rArr; Set_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Buff
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpytobuf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpyfrombuf
</UL>

<P><STRONG><a name="[f6]"></a>run_led</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sem.o(i.run_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = run_led &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_sem
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RecvData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_DealData
</UL>

<P><STRONG><a name="[150]"></a>send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = send &rArr; Wifi_Send &rArr; RISocketTCPSend &rArr; SPITxData &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_device_mac_type
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_command_to_server
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bed_data
</UL>

<P><STRONG><a name="[136]"></a>send_bed_data</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bed_client.o(i.send_bed_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = send_bed_data &rArr; send &rArr; Wifi_Send &rArr; RISocketTCPSend &rArr; SPITxData &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_respone
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_client
</UL>

<P><STRONG><a name="[134]"></a>send_command_to_server</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bed_client.o(i.send_command_to_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = send_command_to_server &rArr; send &rArr; Wifi_Send &rArr; RISocketTCPSend &rArr; SPITxData &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_client
</UL>

<P><STRONG><a name="[14c]"></a>send_data</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, uart1.o(i.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = send_data &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temperature
</UL>

<P><STRONG><a name="[133]"></a>send_device_mac_type</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bed_client.o(i.send_device_mac_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = send_device_mac_type &rArr; send &rArr; Wifi_Send &rArr; RISocketTCPSend &rArr; SPITxData &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mac
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_client
</UL>

<P><STRONG><a name="[88]"></a>setReadStatu</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sem.o(i.setReadStatu))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = setReadStatu &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RecvData
</UL>

<P><STRONG><a name="[eb]"></a>set_Rock</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rock.o(i.set_Rock))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rock_Control
</UL>

<P><STRONG><a name="[140]"></a>set_data_packet</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bed_client.o(i.set_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = set_data_packet &rArr; Check_Temperature &rArr; read_temperature &rArr; check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Rock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_onbed
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Temperature
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Quilt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Piss
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Music
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Milk
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Fan
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Cry
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_Contrl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_packet
</UL>

<P><STRONG><a name="[132]"></a>socket_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bed_client.o(i.socket_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = socket_create &rArr; Wifi_ConnectSocket &rArr; AppCreatSocketProc &rArr; RISocketCreate &rArr; StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_ConnectSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_client
</UL>

<P><STRONG><a name="[156]"></a>spiCfg_moni</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, spi.o(i.spiCfg_moni))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spiCfg_moni &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
</UL>

<P><STRONG><a name="[11e]"></a>spiInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi.o(i.spiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spiInit &rArr; spiCfg_moni &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCfg_moni
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Init
</UL>

<P><STRONG><a name="[b3]"></a>system_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system.o(i.system_Init))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modules_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_grobalBuff
</UL>

<P><STRONG><a name="[148]"></a>task_sem_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sem.o(i.task_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = task_sem_init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>uart1_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, uart1.o(i.uart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart1_init &rArr; USART_Init &rArr; CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxCmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>wait_respone</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bed_client.o(i.wait_respone))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = wait_respone &rArr; read &rArr; Read_FromBuff &rArr; cpyfrombuf &rArr; refresh_BuffState &rArr; Set_Buff &rArr; get_RecvBuff &rArr; lock_sem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bed_data
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[91]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[4f]"></a>startup_task</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.startup_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = startup_task &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_SetReloadValue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_CounterCmd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClockSourceConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[109]"></a>_USBDCore_ControlIN</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_ControlIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _USBDCore_ControlIN &rArr; USBD_EPTWriteINData &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>_USBDCore_Standard_GetStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ht32_usbd_core.o(i._USBDCore_Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _USBDCore_Standard_GetStatus &rArr; USBD_EPTGetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetHalt
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[106]"></a>_USBDCore_Standard_Request</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _USBDCore_Standard_Request &rArr; USBD_EPTInit &rArr; USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>_USBDCore_Standard_SetClearFeature</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_SetClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _USBDCore_Standard_SetClearFeature &rArr; USBD_EPTSetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSetHalt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearHalt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearDTG
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[118]"></a>_USBD_CopyMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i._USBD_CopyMemory))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>

<P><STRONG><a name="[10f]"></a>_USBD_GetEPTnAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i._USBD_GetEPTnAddr))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSetHalt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSendSTALL
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetINT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetHalt
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearINT
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearHalt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearDTG
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReset
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
</UL>

<P><STRONG><a name="[9a]"></a>_HT32F_DVB_ClockConfig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ht32_board.o(i._HT32F_DVB_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _HT32F_DVB_ClockConfig &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDInit
</UL>

<P><STRONG><a name="[c3]"></a>OS_SchedNew</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[82]"></a>read_temperature</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, gy-mcu90615.o(i.read_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = read_temperature &rArr; check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Temperature
</UL>

<P><STRONG><a name="[b6]"></a>music_pause</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, risym-mp3.o(i.music_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = music_pause &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Control
</UL>

<P><STRONG><a name="[b8]"></a>set_volume</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, risym-mp3.o(i.set_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = set_volume &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Control
</UL>

<P><STRONG><a name="[df]"></a>RICheckSum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wmri.o(i.RICheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RICheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateDataHeader
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICreateCmdHeader
</UL>

<P><STRONG><a name="[de]"></a>RICreateCmdHeader</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wmri.o(i.RICreateCmdHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RICreateCmdHeader &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RICheckSum
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIWlanJoin
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketCreate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetWlanType
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetSSID
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetNip
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetKey
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISaveParam
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIResetDevice
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketClose
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIGetWlanStatus
</UL>

<P><STRONG><a name="[e4]"></a>StringToIpaddr</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, wmri.o(i.StringToIpaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = StringToIpaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISocketCreate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RISetNip
</UL>

<P><STRONG><a name="[12d]"></a>_printf_core</STRONG> (Thumb, 988 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[12f]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[12e]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
